from __future__ import print_function

import numpy as np
import cv2 as cv
import sys
import streamlit as st
import tempfile
import os
import pandas as pd
import time
import asyncio
import threading

from io import BytesIO
from PIL import Image
# from rembg import remove
from streamlit_drawable_canvas import st_canvas
import matplotlib.pyplot as plt

st.title("üéàWaterShed Segmentation App")

def IoU(mask_pred, mask_gt):
    # mask_pred = [mask_pred > 0].astype(np.uint8)
    # mask_gt = [mask_gt > 0].astype(np.uint8)
    
    intersection = np.logical_and(mask_pred, mask_gt).sum()
    union = np.logical_or(mask_pred, mask_gt).sum()
    if union == 0.0:
        return 0.0
    iou = intersection / union
    return iou

def Dice_coefficient(mask_pred, mask_gt):
    intersection = np.logical_and(mask_pred, mask_gt).sum()
    # intersection = np.sum(mask_pred * mask_gt)
    sum_pred = mask_pred.sum()
    sum_gt = mask_gt.sum()
    if (sum_pred + sum_gt == 0):
        return 1.0
    dice = (2.0 * intersection) / (sum_pred + sum_gt)
    return dice

path = ['./images/1xemay278.jpg', './images/1xemay544.jpg', 
        './images/1xemay645.jpg', './images/1xemay1458.jpg']

path_gt = ['./images/1xemay278.png', './images/1xemay544.png', 
        './images/1xemay645.png', './images/1xemay1458.png']

name = ['1xemay278.jpg', '1xemay544.jpg', '1xemay645.jpg', '1xemay1458.jpg']

list_image = ["·∫¢nh 1xemay278", "·∫¢nh 1xemay544", "·∫¢nh 1xemay645", "·∫¢nh 1xemay1458"]

path_IoU_img = './images/image_IoU.png'
image_IoU = Image.open(path_IoU_img)

list_images = []
list_image_gt = []

def load_image():
    for i in range(4):
        list_images.append(cv.imread(path[i]))
        list_image_gt.append(cv.imread(path_gt[i], cv.IMREAD_GRAYSCALE))
load_image()


def marker(idx_image, kernels, ratio_thresh):
   
    img_bgr = list_images[idx_image]
    img_blur = cv.medianBlur(src = img_bgr, ksize = 3)
    img_gray = cv.cvtColor(img_bgr, cv.COLOR_BGR2GRAY)
    
    ret, img_thresh = cv.threshold(img_gray, 0, 255, cv.THRESH_BINARY_INV + cv.THRESH_OTSU)

    kernel = np.ones(kernels, np.uint8)
    opening = cv.morphologyEx(img_thresh, cv.MORPH_OPEN, kernel = kernel, iterations = 2)

    # Dist transform
    dist_transform = cv.distanceTransform(src = opening, distanceType = cv.DIST_L2, maskSize = 5)
    
    # Sure foreground
    ret, sure_foreground = cv.threshold(src = dist_transform, thresh = ratio_thresh * np.max(dist_transform), maxval = 255, type = 0)
    
    sure_foreground = np.uint8(sure_foreground)

    # Sure background
    sure_background = cv.dilate(src = opening, kernel = kernel, iterations = 3)

    # Unknown
    unknown = cv.subtract(sure_background, sure_foreground)

    # Markers
    ret, markers = cv.connectedComponents(sure_foreground)
    markers = markers + 1
    markers[unknown == 255] = 0
    markers = cv.watershed(image = img_bgr, markers = markers)
    return markers

def img_training(idx1, idx2):
    col1, col2 = st.columns(2)
    
    img_ori1 = list_images[idx1]
    img_ori2 = list_images[idx2]
    col1.markdown('   <p style="text-indent: 130px;"> <span style = "color:red; font-size:22px;"> ·∫¢nh g·ªëc</span>', unsafe_allow_html=True)
    # col1.markdown("### ·∫¢nh g·ªëc")

    
    img_gt1 = list_image_gt[idx1]
    
    img_gt2 = list_image_gt[idx2]
    # ·∫¢nh nh·ªã ph√¢n ground truth
   
    mask_gt1 = 0 
    if img_gt1 is not None:
        mask_gt1 = img_gt1.copy()
    img_gt1[mask_gt1 == 85] = 255
    img_gt1[mask_gt1 != 85] = 0
    
    mask_gt2 = 0
    if img_gt2 is not None:
        mask_gt2 = img_gt2.copy()
    img_gt2[mask_gt2 == 85] = 255
    img_gt2[mask_gt2 != 85] = 0
    
    # In ·∫£nh
    col1.image(img_ori1)
    col1.markdown(f'   <p style="text-indent: 110px;"> <span style = "color:red; font-size:22px;"> {list_image[idx1]}</span>', unsafe_allow_html=True)
    
    col1.image(img_ori2)
    col1.markdown(f'   <p style="text-indent: 110px;"> <span style = "color:red; font-size:22px;"> {list_image[idx2]} </span>', unsafe_allow_html=True)
    
    col2.markdown('   <p style="text-indent: 100px;"> <span style = "color:red; font-size:22px;"> ·∫¢nh Ground truth</span>', unsafe_allow_html=True)
    col2.image(img_gt1)
    col2.markdown(f'   <p style="text-indent: 100px;"> <span style = "color:red; font-size:22px;">{list_image[idx1]}</span>', unsafe_allow_html=True)
    
    col2.image(img_gt2)
    col2.markdown(f'   <p style="text-indent: 100px;"> <span style = "color:red; font-size:22px;"> {list_image[idx2]}</span>', unsafe_allow_html=True)
    

def get_with_Kernel(lst, x):
    x1 = lst[ :x]
    x2 = lst[x : 2 * x]
    x3 = lst[2 * x : 3 * x]
    return x1, x2, x3

def Plot_IoU(IoU_1, IoU_2, thresh):
    # Plot theo IoU
    x1, x2, x3 = get_with_Kernel(IoU_1, 20)
    y1, y2, y3 = get_with_Kernel(IoU_2, 20)
   
    img2_IoU_kernel3 = IoU_2[:20]
    img2_IoU_kernel5 = IoU_2[20:40]
    img2_IoU_kernel7 = IoU_2[40:60]
    
    fig1, ax = plt.subplots()
    ax.plot(thresh, x1, label='Kernel = (3, 3)')
    ax.plot(thresh, x2, label='Kernel = (5, 5)')
    ax.plot(thresh, x3, label='Kernel = (7, 7)')

    ax.set_xlabel('Threshold')
    ax.set_ylabel('IoU')    
    ax.set_title('Bi·ªÉu ƒë·ªì IoU theo Threshold v√† Kernel c·ªßa ·∫£nh 1xemay278')  
    ax.legend()

    fig2, ax2= plt.subplots()
    ax2.plot(thresh, y1, label='Kernel = (3, 3)')
    ax2.plot(thresh, y2, label='Kernel = (5, 5)')
    ax2.plot(thresh, y3, label='Kernel = (7, 7)')

    ax2.set_xlabel('Threshold')
    ax2.set_ylabel('IoU')    
    ax2.set_title('Bi·ªÉu ƒë·ªì IoU theo Threshold v√† Kernel c·ªßa ·∫£nh 1xemay544')  
    ax2.legend()
    c1, c2 = st.columns(2)
    c1.pyplot(fig1)
    c2.pyplot(fig2)

def Plot_Dice(lst_dice_1, lst_dice_2, thresh):
    # st.markdown("#### * ƒê·ªô ƒëo: Dice Coefficient")
    st.markdown(f'  <span style = "color:blue; font-size:24px;"> * ƒê·ªô ƒëo: Dice Coefficient </span>', unsafe_allow_html=True)
    image_dice = Image.open('./images/dice_coefficient.png')
    st.image(image_dice)
    
    #Plot theo Dice coefficient
    lst_dice_1 = np.array(lst_dice_1)
    lst_dice_2 = np.array(lst_dice_2)
    
    x1, x2, x3 = get_with_Kernel(lst_dice_1, 20)
    y1, y2, y3 = get_with_Kernel(lst_dice_2, 20)
    
    fi1, axis1 = plt.subplots()
    axis1.plot(thresh, x1, label='Kernel = (3, 3)')
    axis1.plot(thresh, x2, label='Kernel = (5, 5)')
    axis1.plot(thresh, x3, label='Kernel = (7, 7)')
    axis1.set_xlabel('Threshold')
    axis1.set_ylabel('Dice coefficient')
    axis1.set_title('Bi·ªÉu ƒë·ªì Dice theo Threshold v√† Kernel c·ªßa ·∫£nh 1xemay278')
    axis1.legend()
    
    
    fi2, axis2 = plt.subplots()
    axis2.plot(thresh, y1, label='Kernel = (3, 3)')
    axis2.plot(thresh, y2, label='Kernel = (5, 5)')
    axis2.plot(thresh, y3, label='Kernel = (7, 7)')
    axis2.set_xlabel('Threshold')
    axis2.set_ylabel('Dice coefficient')
    axis2.set_title('Bi·ªÉu ƒë·ªì Dice theo Threshold v√† Kernel c·ªßa ·∫£nh 1xemay544')
    axis2.legend()
    
    coll1, coll2 = st.columns(2)
    coll1.pyplot(fi1)
    coll2.pyplot(fi2)


def best_para(lst_IoU_1, lst_IoU_2, lst_dice_1, lst_dice_2, lst_thresh):
    
    # L·∫•y ƒë·ªô ƒëo IoU c·ªßa Kernel 3, 5, 7
    x1, x2, x3 = get_with_Kernel(lst_IoU_1, 20)
    y1, y2, y3 = get_with_Kernel(lst_IoU_2, 20)
    
    # L·∫•y ƒë·ªô ƒëo Dice c·ªßa Kernel 3, 5, 7
    d_x1, d_x2, d_x3 = get_with_Kernel(lst_dice_1, 20)
    d_y1, d_y2, d_y3 = get_with_Kernel(lst_dice_2, 20)
    
    # T·ªïng ƒë·ªô ƒëo c·ªßa t·ª´ng kernel
    sum_K3 = x1 + y1 + d_x1 + d_y1
    sum_K5 = x2 + y2 + d_x2 + d_y2
    sum_K7 = x3 + y3 + d_x3 + d_y3
    
    # L·∫•y t·ªïng ƒë·ªô ƒëo l·ªõn nh·∫•t c·ªßa 3 kernel
    max_metrics = max(max(sum_K3), max(sum_K5), max(sum_K7))
    
    # T√¨m kernel v√† thresh t·ªët nh·∫•t 
    best = 0
    kernel_best = (3, 3)
    if max_metrics == max(sum_K3):
        best = sum_K3
        kernel_best = (3, 3)
    if max_metrics == max(sum_K5):
        best = sum_K5
        kernel_best = (5, 5)
    
    if max_metrics == max(sum_K7):
        best = sum_K7
        kernel_best = (7, 7)
        
    id = np.where(best == max_metrics)
    st.markdown("##### * Tham s·ªë t·ªët nh·∫•t l√†:")
    st.markdown(f"######  - Kernel = {kernel_best}")
    st.markdown(f"######  - Threshold = {lst_thresh[id[0][0]]}")
    return kernel_best, lst_thresh[id[0][0]]

def Apply_best_Para(best_kernel, best_thresh, id_1, id_2):
    ret = []
    dice = []
    watershed_res = []
    ground_truth = []
    for i in range(id_1, id_2, 1):
    # Ground truth
        img_gt = cv.imread(path_gt[i], cv.IMREAD_GRAYSCALE)
        mask_gt = img_gt.copy()
        img_gt[mask_gt == 85] = 255
        img_gt[mask_gt != 85] = 0
        
        # Marker
        markers = marker(i, best_kernel, best_thresh)
        num_labels = np.unique(markers)
        img_bg = cv.imread(path[i], cv.IMREAD_GRAYSCALE)
        img_bg[img_bg != 0] = 0
        
        # T√¥ m√†u cho t·ª´ng k√≠ t·ª± c·ªßa ·∫£nh
        for labels in num_labels:
            if labels == -1:    
                continue
            id = np.where(markers == labels)
            x_min = min(id[0])
            x_max = max(id[0])
            
            y_min = min(id[1])
            y_max = max(id[1])
            
            height = (x_max - x_min) / img_bg.shape[0]
            width = (y_max - y_min) / img_bg.shape[1]
            if height >= 0.3 and height <= 0.6 and width >= 0.0 and width <= 0.3:
                img_bg[markers == labels] = 255
                
        img_pred = 0
        img_ground = 0
        if img_bg is not None:
            img_pred = img_bg.copy()
        if img_gt is not None:
            img_ground = img_gt.copy()
        img_ground[img_ground == 255] = 1
        img_pred[img_pred == 255] = 1
        watershed_res.append(img_bg)
        ground_truth.append(img_gt)
        ret.append(IoU(img_pred, img_ground))
        dice.append(Dice_coefficient(img_pred, img_ground))
    return watershed_res, ground_truth, ret, dice

def image_with_other_Kernel(i, kernels, thresh, num_labels):
    lst_pred = []
    img_gt = cv.imread(path_gt[i], cv.IMREAD_GRAYSCALE)
    mask_gt = img_gt.copy()
    img_gt[mask_gt == 85] = 255
    img_gt[mask_gt != 85] = 0
    lst_pred.append(img_gt)
    for kernel in kernels:
    # Ground truth
        # Marker
        markers = marker(i, kernel, thresh)
        num_labels = np.unique(markers)
        img_bg = cv.imread(path[i], cv.IMREAD_GRAYSCALE)
        img_bg[img_bg != 0] = 0
        
        # T√¥ m√†u cho t·ª´ng k√≠ t·ª± c·ªßa ·∫£nh
        for labels in num_labels:
            if labels == -1:    
                continue
            id = np.where(markers == labels)
            x_min = min(id[0])
            x_max = max(id[0])
            
            y_min = min(id[1])
            y_max = max(id[1])
            
            height = (x_max - x_min) / img_bg.shape[0]
            width = (y_max - y_min) / img_bg.shape[1]
            if height >= 0.3 and height <= 0.6 and width >= 0.0 and width <= 0.3:
                img_bg[markers == labels] = 255
        lst_pred.append(img_bg)
    cot1, cot2, cot3, cot4, cot5 = st.columns(5)
    cot1.image(list_images[i], caption=f"{list_image[i]} trong t·∫≠p train")
    cot2.image(lst_pred[0], caption="Groundtruth")
    cot3.image(lst_pred[1], caption="Mask v·ªõi Kernel = 3")
    cot4.image(lst_pred[2], caption="Mask v·ªõi Kernel = 5")
    cot5.image(lst_pred[3], caption="Mask v·ªõi Kernel = 7")


def Mask_of_Train(kernels, num_labels):
    st.markdown(f"#### 3.1 Minh h·ªça Mask c·ªßa t·∫≠p Train theo t·ª´ng tham s·ªë kh√°c nhau")
    thresh = st.slider("Ch·ªçn ng∆∞·ª°ng Thresh: ", 0.0, 0.4, 0.0)
    image_with_other_Kernel(0, kernels, thresh, num_labels)
    image_with_other_Kernel(1, kernels, thresh, num_labels)
    

def Result_of_Test(best_kernel, best_thresh):
    watershed_res, ground_truth, ret, dice = Apply_best_Para(best_kernel, best_thresh, 2, 4)
    st.markdown(f"#### 3.2 K·∫øt qu·∫£ khi √°p d·ª•ng c√°c ch·ªâ s·ªë v·ª´a t√¨m ƒë∆∞·ª£c v√†o t·∫≠p Test")
    cc1, cc2 = st.columns(2)
    #Plot Test1
    cc1.image(ground_truth[0])
    cc1.markdown(f'   <p style="text-indent: 40px;"> <span style = "color:red; font-size:22px;"> Ground truth {list_image[2]}  </span>', unsafe_allow_html=True)
    cc2.image(watershed_res[0])
    cc2.markdown(f'   <p style="text-indent: 90px;"> <span style = "color:red; font-size:22px;"> IoU = {ret[0]:.2f}, Dice = {dice[0]:.2f} </span>', unsafe_allow_html=True)
    
    #Plot Test2t
    cc1.image(ground_truth[1])
    cc1.markdown(f'   <p style="text-indent: 40px;"> <span style = "color:red; font-size:22px;"> Ground truth {list_image[3]} </span>', unsafe_allow_html=True)
    cc2.image(watershed_res[1])
    cc2.markdown(f'   <p style="text-indent: 90px;"> <span style = "color:red; font-size:22px;"> IoU = {ret[1]:.2f}, Dice = {dice[1]:.2f} </span>', unsafe_allow_html=True)

def Pre_train():
    # C√°c tham s·ªë
    kernels = [(3, 3), (5, 5), (7, 7)]
    lst_thresh = np.arange(0.0, 0.4, 0.02)
    lst_IoU_1 = []
    lst_IoU_2 = []
    
    lst_dice_1 = []
    lst_dice_2 = []
    ans = []
    
    lst_ground = []
    lst_pred = []
    
    #Th·ª≠ v·ªõi c√°c tham s·ªë
    for kernel in kernels:
        for ratio in lst_thresh:
            for i in range(2):
                # Ground truth
                img_gt = cv.imread(path_gt[i], cv.IMREAD_GRAYSCALE)
                mast_gt = 0
                if img_gt is not None:
                    mask_gt = img_gt.copy()
                img_gt[mask_gt == 85] = 255
                img_gt[mask_gt != 85] = 0
                
                # Marker
                markers = marker(i, kernel, ratio)
                num_labels = np.unique(markers)
                img_bg = cv.imread(path[i], cv.IMREAD_GRAYSCALE)
                img_bg[img_bg != 0] = 0
                
                # T√¥ m√†u cho t·ª´ng k√≠ t·ª± c·ªßa ·∫£nh
                for labels in num_labels:
                    if labels == -1:    
                        continue
                    id = np.where(markers == labels)
                    x_min = min(id[0])
                    x_max = max(id[0])
                    
                    y_min = min(id[1])
                    y_max = max(id[1])
                    
                    height = (x_max - x_min) / img_bg.shape[0]
                    width = (y_max - y_min) / img_bg.shape[1]
                    if height >= 0.3 and height <= 0.6 and width >= 0.0 and width <= 0.3:
                        img_bg[markers == labels] = 255
                ans.append(img_bg)
                img_pred = 0
                img_ground = 0
                if img_bg is not None:
                    img_pred = img_bg.copy()
                if img_gt is not None:
                    img_ground = img_gt.copy()
                img_ground[img_ground == 255] = 1
                img_pred[img_pred == 255] = 1
                if i == 0:
                    lst_IoU_1.append(IoU(img_pred, img_ground))
                    lst_dice_1.append(Dice_coefficient(img_pred, img_ground))
                else:
                    lst_IoU_2.append(IoU(img_pred, img_ground))
                    lst_dice_2.append(Dice_coefficient(img_pred, img_ground))
                    
    lst_IoU_1 = np.array(lst_IoU_1)
    lst_IoU_2 = np.array(lst_IoU_2)
    lst_dice_1 = np.array(lst_dice_1)
    lst_dice_2 = np.array(lst_dice_2)
    return lst_IoU_1, lst_IoU_2, lst_dice_1, lst_dice_2

def calc():   
    # C√°c tham s·ªë
    kernels = [(3, 3), (5, 5), (7, 7)]
    lst_thresh = np.arange(0.0, 0.4, 0.02)
    lst_IoU_1 = []
    lst_IoU_2 = []
    
    lst_dice_1 = []
    lst_dice_2 = []
    ans = []
    #Th·ª≠ v·ªõi c√°c tham s·ªë
    for kernel in kernels:
        for ratio in lst_thresh:
            for i in range(2):
                # Ground truth
                img_gt = cv.imread(path_gt[i], cv.IMREAD_GRAYSCALE)
                mast_gt = 0
                if img_gt is not None:
                    mask_gt = img_gt.copy()
                img_gt[mask_gt == 85] = 255
                img_gt[mask_gt != 85] = 0
                
                # Marker
                markers = marker(i, kernel, ratio)
                num_labels = np.unique(markers)
                img_bg = cv.imread(path[i], cv.IMREAD_GRAYSCALE)
                img_bg[img_bg != 0] = 0
                
                # T√¥ m√†u cho t·ª´ng k√≠ t·ª± c·ªßa ·∫£nh
                for labels in num_labels:
                    if labels == -1:    
                        continue
                    id = np.where(markers == labels)
                    x_min = min(id[0])
                    x_max = max(id[0])
                    
                    y_min = min(id[1])
                    y_max = max(id[1])
                    
                    height = (x_max - x_min) / img_bg.shape[0]
                    width = (y_max - y_min) / img_bg.shape[1]
                    if height >= 0.3 and height <= 0.6 and width >= 0.0 and width <= 0.3:
                        img_bg[markers == labels] = 255
                ans.append(img_bg)
                img_pred = 0
                img_ground = 0
                if img_bg is not None:
                    img_pred = img_bg.copy()
                if img_gt is not None:
                    img_ground = img_gt.copy()
                img_ground[img_ground == 255] = 1
                img_pred[img_pred == 255] = 1
                if i == 0:
                    lst_IoU_1.append(IoU(img_pred, img_ground))
                    lst_dice_1.append(Dice_coefficient(img_pred, img_ground))
                else:
                    lst_IoU_2.append(IoU(img_pred, img_ground))
                    lst_dice_2.append(Dice_coefficient(img_pred, img_ground))
                    
    lst_IoU_1 = np.array(lst_IoU_1)
    lst_IoU_2 = np.array(lst_IoU_2)
    
    Plot_IoU(lst_IoU_1, lst_IoU_2, lst_thresh)
    Plot_Dice(lst_dice_1, lst_dice_2, lst_thresh)
    st.markdown("#### **Trong ƒë√≥:**")
    st.markdown(f'<span style = "color:red; font-size:18px;"> - Threshold : T·ªâ l·ªá % c·ªßa c√°c ƒëi·ªÉm Unknown ƒë∆∞·ª£c ch·ªçn l√† Sure foreground </span>', unsafe_allow_html=True)
    # T√¨m tham s·ªë t·ªët nh·∫•t
    
    best_kernel, best_thresh = best_para(lst_IoU_1, lst_IoU_2, lst_dice_1, lst_dice_2, lst_thresh)
    Mask_of_Train(kernels, num_labels)
    Result_of_Test(best_kernel, best_thresh)
    
def Text_PineLine():
    st.markdown("##### **Trong ƒë√≥:**")
    st.markdown("- **(1)**: L√†m m·ªù ·∫£nh v·ªõi thu·∫≠t to√°n **Median Blur**")
    st.markdown("- **(2)**: Chuy·ªÉn t·ª´ ·∫£nh **Blurred** sang ·∫£nh **Gray**")
    st.markdown("- **(3)**: S·ª≠ d·ª•ng thu·∫≠t to√°n **Inverse Binary Thresholding** v√† **Otsu's Binarization** ƒë·ªÉ chuy·ªÉn th√†nh ·∫£nh **Binary**")
    st.markdown("- **(4)**: D·ª±a v√†o ·∫£nh **Binary** ƒë·ªÉ x√°c ƒë·ªãnh **Distance transform**")
    st.markdown("- **(5)**: D·ª±a v√†o ·∫£nh **Binary** ƒë·ªÉ x√°c ƒë·ªãnh **Sure background**")
    st.markdown("- **(6)**: D·ª±a v√†o **Distance transform** ƒë·ªÉ x√°c ƒë·ªãnh **Sure foreground** " 
               + "(**Sure foreground** ƒë∆∞·ª£c x√°c ƒë·ªãnh b·∫±ng c√°ch gi·ªØ l·∫°i nh·ªØng v√πng c√≥ gi√° tr·ªã l·ªõn h∆°n ng∆∞·ª°ng **(Threshsold)** trong ·∫£nh sau khi √°p d·ª•ng **Distance transform**)")
    st.markdown("- **(7), (8)**: D·ª±a v√†o **Sure foreground** v√† **Sure background** ƒë·ªÉ x√°c ƒë·ªãnh v√πng **Unknown**")
    st.markdown("- **(9), (10)**: D·ª±a v√†o **Sure foreground** v√† **Unknown** ƒë·ªÉ t·∫°o ra **Marker**")
    
    st.markdown("- **(11)**: X√°c ƒë·ªãnh ƒë·ªëi t∆∞·ª£ng ph√¢n ƒëo·∫°n d·ª±a v√†o thu·∫≠t to√°n **Watershed Transform**")
    
def Example_threshold():
    st.markdown("#### * V√≠ d·ª• minh h·ªça k·∫øt qu·∫£ ch·ªçn Threshold")
    c1, c2, c3, c4 = st.columns(4)
    c1.image(list_images[0], caption="·∫¢nh g·ªëc")
    
def run():
    st.markdown("### 1. T·∫≠p Train v√† Test")
    st.markdown("#### 1.1 T·∫≠p Train")
    img_training(0, 1)
    st.markdown("#### 1.2 T·∫≠p Test")
    img_training(2, 3)
    
    st.markdown("### 2. Qu√° tr√¨nh ph√¢n ƒëo·∫°n k√≠ t·ª± b·∫±ng thu·∫≠t to√°n Watershed Segmentation")
    image_pipe_line = cv.imread('./images/pipeline_watershed.PNG')
    st.image(image_pipe_line, channels='BGR')
    Text_PineLine()
    st.markdown("### 3. X√°c ƒë·ªãnh c√°c tham s·ªë t·ªëi ∆∞u")
    st.markdown("##### C√°c tham s·ªë ƒë∆∞·ª£c s·ª≠ d·ª•ng")
    st.write("- Kernel = [(3, 3), (5, 5), (7, 7)]" )
    st.write("- Threshold = [0.00, 0.02, ..., 0.4]")
    # st.markdown("#### * ƒê·ªô ƒëo: IoU")
    st.markdown(f' <span style = "color:blue; font-size:24px;"> * ƒê·ªô ƒëo: IoU </span>', unsafe_allow_html=True)
    st.image(image_IoU, width=350)
    with st.spinner("ƒêang hu·∫•n luy·ªán..."):
        calc()
    # process()

if len(list_images) > 0:
    run()

